// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using noMoreAzerty_back.Data;

#nullable disable

namespace noMoreAzerty_back.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251030102126_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("noMoreAzerty_back.Models.Share", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VaultId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "VaultId");

                    b.HasIndex("VaultId");

                    b.ToTable("Share", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            VaultId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            AddedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("noMoreAzerty_back.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LastLogin = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("noMoreAzerty_back.Models.Vault", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("HashPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Vault", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HashPassword = "hashed-password-demo",
                            Name = "Vault personnel",
                            PasswordSalt = "random-salt-demo",
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        });
                });

            modelBuilder.Entity("noMoreAzerty_back.Models.VaultEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CipherCommentary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CipherPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CipherTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CipherUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CipherUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComentaryIV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComentaryTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordIV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleIV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlIV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsernameIV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsernameTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VaultId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VaultId");

                    b.ToTable("VaultEntry", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CipherCommentary = "cipher_comment",
                            CipherPassword = "cipher_gmail_password",
                            CipherTitle = "cipher_gmail_title",
                            CipherUrl = "cipher_gmail_url",
                            CipherUsername = "cipher_gmail_user",
                            ComentaryIV = "iv5",
                            ComentaryTag = "tag5",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            PasswordIV = "iv3",
                            PasswordTag = "tag3",
                            TitleIV = "iv1",
                            TitleTag = "tag1",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UrlIV = "iv4",
                            UrlTag = "tag4",
                            UsernameIV = "iv2",
                            UsernameTag = "tag2",
                            VaultId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CipherCommentary = "cipher_comment2",
                            CipherPassword = "cipher_github_password",
                            CipherTitle = "cipher_github_title",
                            CipherUrl = "cipher_github_url",
                            CipherUsername = "cipher_github_user",
                            ComentaryIV = "iv10",
                            ComentaryTag = "tag10",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            PasswordIV = "iv8",
                            PasswordTag = "tag8",
                            TitleIV = "iv6",
                            TitleTag = "tag6",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UrlIV = "iv9",
                            UrlTag = "tag9",
                            UsernameIV = "iv7",
                            UsernameTag = "tag7",
                            VaultId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        });
                });

            modelBuilder.Entity("noMoreAzerty_back.Models.VaultEntryHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<string>("CipherCommentary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CipherPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CipherTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CipherUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CipherUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComentaryIV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComentaryTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordIV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleIV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlIV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsernameIV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsernameTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VaultEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VaultId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VaultEntryId");

                    b.HasIndex("VaultId");

                    b.ToTable("VaultEntryHistory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            Action = 0,
                            CipherCommentary = "cipher_history_comment",
                            CipherPassword = "cipher_history_pass",
                            CipherTitle = "cipher_history_title",
                            CipherUrl = "cipher_history_url",
                            CipherUsername = "cipher_history_user",
                            ComentaryIV = "hiv5",
                            ComentaryTag = "htag5",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PasswordIV = "hiv3",
                            PasswordTag = "htag3",
                            TitleIV = "hiv1",
                            TitleTag = "htag1",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UrlIV = "hiv4",
                            UrlTag = "htag4",
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            UsernameIV = "hiv2",
                            UsernameTag = "htag2",
                            VaultEntryId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            VaultId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        });
                });

            modelBuilder.Entity("noMoreAzerty_back.Models.Share", b =>
                {
                    b.HasOne("noMoreAzerty_back.Models.User", "User")
                        .WithMany("Shares")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("noMoreAzerty_back.Models.Vault", "Vault")
                        .WithMany("Shares")
                        .HasForeignKey("VaultId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vault");
                });

            modelBuilder.Entity("noMoreAzerty_back.Models.Vault", b =>
                {
                    b.HasOne("noMoreAzerty_back.Models.User", "User")
                        .WithMany("Vaults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("noMoreAzerty_back.Models.VaultEntry", b =>
                {
                    b.HasOne("noMoreAzerty_back.Models.Vault", "Vault")
                        .WithMany("VaultEntries")
                        .HasForeignKey("VaultId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Vault");
                });

            modelBuilder.Entity("noMoreAzerty_back.Models.VaultEntryHistory", b =>
                {
                    b.HasOne("noMoreAzerty_back.Models.User", "User")
                        .WithMany("VaultEntryHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("noMoreAzerty_back.Models.VaultEntry", "VaultEntry")
                        .WithMany("VaultEntryHistories")
                        .HasForeignKey("VaultEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("noMoreAzerty_back.Models.Vault", "Vault")
                        .WithMany("VaultEntryHistories")
                        .HasForeignKey("VaultId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vault");

                    b.Navigation("VaultEntry");
                });

            modelBuilder.Entity("noMoreAzerty_back.Models.User", b =>
                {
                    b.Navigation("Shares");

                    b.Navigation("VaultEntryHistories");

                    b.Navigation("Vaults");
                });

            modelBuilder.Entity("noMoreAzerty_back.Models.Vault", b =>
                {
                    b.Navigation("Shares");

                    b.Navigation("VaultEntries");

                    b.Navigation("VaultEntryHistories");
                });

            modelBuilder.Entity("noMoreAzerty_back.Models.VaultEntry", b =>
                {
                    b.Navigation("VaultEntryHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
